# PowerShell Backup Management Tool
# C√¥ng c·ª• qu·∫£n l√Ω backup cho Windows

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("Backup", "Restore", "Config", "Status", "Enable", "Disable", "Start", "List")]
    [string]$Action,
    
    [int]$Hours,
    [int]$MaxBackups,
    [string]$Timestamp,
    [switch]$AutoStart,
    [switch]$Help
)

# Colors for output
function Write-Success { param($Message) Write-Host $Message -ForegroundColor Green }
function Write-Error { param($Message) Write-Host $Message -ForegroundColor Red }
function Write-Warning { param($Message) Write-Host $Message -ForegroundColor Yellow }
function Write-Info { param($Message) Write-Host $Message -ForegroundColor Cyan }

function Show-Help {
    Write-Host "üîÑ Backup Management Tool for Windows" -ForegroundColor Cyan
    Write-Host "=====================================" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "Usage:" -ForegroundColor White
    Write-Host "  .\backup-tools.ps1 -Action <action> [options]" -ForegroundColor Gray
    Write-Host ""
    Write-Host "Actions:" -ForegroundColor White
    Write-Host "  Backup              - T·∫°o backup ngay l·∫≠p t·ª©c" -ForegroundColor Gray
    Write-Host "  Restore             - Kh√¥i ph·ª•c t·ª´ backup m·ªõi nh·∫•t" -ForegroundColor Gray
    Write-Host "  Config              - C·∫•u h√¨nh backup (-Hours <h> -MaxBackups <n>)" -ForegroundColor Gray
    Write-Host "  Status              - Ki·ªÉm tra tr·∫°ng th√°i backup" -ForegroundColor Gray
    Write-Host "  Enable              - B·∫≠t backup t·ª± ƒë·ªông" -ForegroundColor Gray
    Write-Host "  Disable             - T·∫Øt backup t·ª± ƒë·ªông" -ForegroundColor Gray
    Write-Host "  Start               - Kh·ªüi ƒë·ªông backup scheduler" -ForegroundColor Gray
    Write-Host "  List                - Xem danh s√°ch backup c√≥ s·∫µn" -ForegroundColor Gray
    Write-Host ""
    Write-Host "Examples:" -ForegroundColor White
    Write-Host "  .\backup-tools.ps1 -Action Backup" -ForegroundColor Yellow
    Write-Host "  .\backup-tools.ps1 -Action Config -Hours 6 -MaxBackups 10" -ForegroundColor Yellow
    Write-Host "  .\backup-tools.ps1 -Action Restore -Timestamp '2024-01-15T10-30-00'" -ForegroundColor Yellow
    Write-Host "  .\backup-tools.ps1 -Action Status" -ForegroundColor Yellow
    Write-Host ""
}

function Test-NodeJs {
    try {
        $nodeVersion = node --version 2>$null
        if ($nodeVersion) {
            Write-Info "‚úÖ Node.js version: $nodeVersion"
            return $true
        }
    } catch {
        Write-Error "‚ùå Node.js kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y!"
        Write-Warning "üí° Vui l√≤ng c√†i ƒë·∫∑t Node.js t·ª´ https://nodejs.org/"
        return $false
    }
    return $false
}

function Test-BackupScripts {
    $scripts = @("backup-script.js", "restore-backup.js", "auto-backup.js")
    $missing = @()
    
    foreach ($script in $scripts) {
        if (!(Test-Path $script)) {
            $missing += $script
        }
    }
    
    if ($missing.Count -gt 0) {
        Write-Error "‚ùå Thi·∫øu script backup:"
        $missing | ForEach-Object { Write-Error "   - $_" }
        return $false
    }
    
    Write-Info "‚úÖ T·∫•t c·∫£ script backup ƒë√£ s·∫µn s√†ng"
    return $true
}

function Invoke-BackupCommand {
    param([string]$Command, [string]$Description)
    
    Write-Info "üöÄ $Description..."
    Write-Host ""
    
    try {
        $result = Invoke-Expression $Command
        if ($LASTEXITCODE -eq 0) {
            Write-Success "‚úÖ Ho√†n th√†nh: $Description"
        } else {
            Write-Error "‚ùå L·ªói khi th·ª±c hi·ªán: $Description"
        }
        return $result
    } catch {
        Write-Error "‚ùå L·ªói: $($_.Exception.Message)"
        return $null
    }
}

function Main {
    if ($Help -or $Action -eq "Help") {
        Show-Help
        return
    }
    
    Write-Host "üîÑ Backup Management Tool" -ForegroundColor Cyan
    Write-Host "=========================" -ForegroundColor Cyan
    Write-Host ""
    
    # Check prerequisites
    if (!(Test-NodeJs)) { return }
    if (!(Test-BackupScripts)) { return }
    
    # Execute action
    switch ($Action) {
        "Backup" {
            Invoke-BackupCommand "node backup-script.js" "T·∫°o backup"
        }
        
        "Restore" {
            if ($Timestamp) {
                Invoke-BackupCommand "node restore-backup.js $Timestamp" "Kh√¥i ph·ª•c backup $Timestamp"
            } else {
                Invoke-BackupCommand "node restore-backup.js" "Kh√¥i ph·ª•c backup m·ªõi nh·∫•t"
            }
        }
        
        "Config" {
            if ($Hours -and $MaxBackups) {
                Invoke-BackupCommand "node auto-backup.js config $Hours $MaxBackups" "C·∫•u h√¨nh backup: $Hours gi·ªù, gi·ªØ $MaxBackups backup"
            } elseif ($Hours) {
                Invoke-BackupCommand "node auto-backup.js config $Hours" "C·∫•u h√¨nh interval: $Hours gi·ªù"
            } else {
                Write-Warning "‚ö†Ô∏è  Vui l√≤ng cung c·∫•p -Hours v√†/ho·∫∑c -MaxBackups"
                Write-Info "V√≠ d·ª•: -Hours 6 -MaxBackups 10"
            }
        }
        
        "Status" {
            Invoke-BackupCommand "node auto-backup.js status" "Ki·ªÉm tra tr·∫°ng th√°i backup"
        }
        
        "Enable" {
            Invoke-BackupCommand "node auto-backup.js enable" "B·∫≠t backup t·ª± ƒë·ªông"
        }
        
        "Disable" {
            Invoke-BackupCommand "node auto-backup.js disable" "T·∫Øt backup t·ª± ƒë·ªông"
        }
        
        "Start" {
            Write-Info "üöÄ Kh·ªüi ƒë·ªông backup scheduler..."
            Write-Warning "‚ö†Ô∏è  Scheduler s·∫Ω ch·∫°y trong background. Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng."
            Write-Host ""
            node auto-backup.js start
        }
        
        "List" {
            Invoke-BackupCommand "node restore-backup.js list" "Danh s√°ch backup c√≥ s·∫µn"
        }
        
        default {
            Write-Error "‚ùå Action kh√¥ng h·ª£p l·ªá: $Action"
            Show-Help
        }
    }
}

# Quick status check function
function Show-QuickStatus {
    Write-Host ""
    Write-Info "üìä Tr·∫°ng th√°i nhanh:"
    
    # Check if backup directory exists
    if (Test-Path "backups") {
        $backupCount = (Get-ChildItem "backups" -Directory | Where-Object { $_.Name -like "*-*-*T*" }).Count
        Write-Success "   Backup directory: C√≥ ($backupCount backup)"
    } else {
        Write-Warning "   Backup directory: Ch∆∞a c√≥"
    }
    
    # Check config file
    if (Test-Path "backup-config.json") {
        try {
            $config = Get-Content "backup-config.json" | ConvertFrom-Json
            $status = if ($config.enabled) { "B·∫≠t" } else { "T·∫Øt" }
            Write-Info "   Auto backup: $status (m·ªói $($config.intervalHours) gi·ªù)"
        } catch {
            Write-Warning "   Config file: L·ªói ƒë·ªçc file"
        }
    } else {
        Write-Warning "   Config file: Ch∆∞a c√≥"
    }
    
    # Check database files
    $dbFiles = @("db/users.json", "backend/db/users.json")
    foreach ($file in $dbFiles) {
        if (Test-Path $file) {
            Write-Success "   $file`: C√≥"
        } else {
            Write-Warning "   $file`: Kh√¥ng c√≥"
        }
    }
    
    Write-Host ""
}

# Add quick actions
function Show-QuickActions {
    Write-Host "üéØ H√†nh ƒë·ªông nhanh:" -ForegroundColor Yellow
    Write-Host "  B - Backup ngay" -ForegroundColor Gray
    Write-Host "  R - Restore m·ªõi nh·∫•t" -ForegroundColor Gray
    Write-Host "  S - Xem status" -ForegroundColor Gray
    Write-Host "  L - List backups" -ForegroundColor Gray
    Write-Host "  Q - Tho√°t" -ForegroundColor Gray
    Write-Host ""
    
    $choice = Read-Host "Ch·ªçn h√†nh ƒë·ªông (B/R/S/L/Q)"
    
    switch ($choice.ToUpper()) {
        "B" { $Action = "Backup"; Main }
        "R" { $Action = "Restore"; Main }
        "S" { $Action = "Status"; Main }
        "L" { $Action = "List"; Main }
        "Q" { Write-Info "üëã T·∫°m bi·ªát!"; return }
        default { Write-Warning "‚ö†Ô∏è  L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá"; Show-QuickActions }
    }
}

# Run main function
if ($Action) {
    Main
    Show-QuickStatus
} else {
    Show-Help
    Show-QuickStatus
    Show-QuickActions
}